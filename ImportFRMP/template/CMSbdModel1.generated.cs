//---------------------------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated by T4Model template for T4 (https://github.com/linq2db/t4models).
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;

using LinqToDB;
using LinqToDB.Common;
using LinqToDB.Data;
using LinqToDB.DataProvider.SqlServer;
using LinqToDB.Mapping;

namespace ImportFRMP.models
{
	/// <summary>
	/// Database       : DislyMVC
	/// Data Source    : chuvashia.com
	/// Server Version : 11.00.3000
	/// </summary>
	public partial class DbModel : LinqToDB.Data.DataConnection
	{
		public ITable<import_frmp_orgs>    import_frmp_orgss    { get { return this.GetTable<import_frmp_orgs>(); } }
		public ITable<import_frmp_peoples> import_frmp_peopless { get { return this.GetTable<import_frmp_peoples>(); } }

		public DbModel()
			: base("DbModel")
		{
			InitDataContext();
		}

		public DbModel(string configuration)
			: base(configuration)
		{
			InitDataContext();
		}

		partial void InitDataContext();

		#region Table Functions

		#region SF_SplitString

		[Sql.TableFunction(Schema="dbo", Name="SF_SplitString")]
		public ITable<SF_SplitStringResult> SF_SplitString(string @List, char? @Splitter)
		{
			return this.GetTable<SF_SplitStringResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				@List,
				@Splitter);
		}

		public partial class SF_SplitStringResult
		{
			public int    ID { get; set; }
			public string V  { get; set; }
		}

		#endregion

		#region SF_UserResolutions

		[Sql.TableFunction(Schema="dbo", Name="SF_UserResolutions")]
		public ITable<SF_UserResolutionsResult> SF_UserResolutions(string @Url, Guid? @User)
		{
			return this.GetTable<SF_UserResolutionsResult>(this, (MethodInfo)MethodBase.GetCurrentMethod(),
				@Url,
				@User);
		}

		public partial class SF_UserResolutionsResult
		{
			public bool? B_Read   { get; set; }
			public bool? B_Write  { get; set; }
			public bool? B_Change { get; set; }
			public bool? B_Delete { get; set; }
		}

		#endregion

		#endregion

		#region FreeTextTable

		public class FreeTextKey<T>
		{
			public T   Key;
			public int Rank;
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(string field, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				field,
				text);
		}

		[FreeTextTableExpression]
		public ITable<FreeTextKey<TKey>> FreeTextTable<TTable,TKey>(Expression<Func<TTable,string>> fieldSelector, string text)
		{
			return this.GetTable<FreeTextKey<TKey>>(
				this,
				((MethodInfo)(MethodBase.GetCurrentMethod())).MakeGenericMethod(typeof(TTable), typeof(TKey)),
				fieldSelector,
				text);
		}

		#endregion
	}

	[Table(Schema="dbo", Name="import_frmp_orgs")]
	public partial class import_frmp_orgs
	{
		[Column,     NotNull    ] public Guid     guid     { get; set; } // uniqueidentifier
		[PrimaryKey, NotNull    ] public string   c_oid    { get; set; } // varchar(64)
		[Column,        Nullable] public string   c_name   { get; set; } // varchar(64)
		[Column,     NotNull    ] public DateTime d_modify { get; set; } // datetime
	}

	[Table(Schema="dbo", Name="import_frmp_peoples")]
	public partial class import_frmp_peoples
	{
		[PrimaryKey, NotNull    ] public Guid      id           { get; set; } // uniqueidentifier
		[Column,        Nullable] public string    f_org        { get; set; } // varchar(64)
		[Column,        Nullable] public string    c_surname    { get; set; } // varchar(64)
		[Column,        Nullable] public string    c_name       { get; set; } // varchar(64)
		[Column,        Nullable] public string    c_patronymic { get; set; } // varchar(64)
		[Column,     NotNull    ] public string    c_snils      { get; set; } // varchar(64)
		[Column,        Nullable] public bool?     b_sex        { get; set; } // bit
		[Column,        Nullable] public DateTime? d_birthdate  { get; set; } // datetime
		[Column,        Nullable] public DateTime? d_modify     { get; set; } // datetime
		[Column,        Nullable] public bool?     b_changed    { get; set; } // bit
	}

	public static partial class DbModelStoredProcedures
	{
		#region sp_alterdiagram

		public static int sp_alterdiagram(this DataConnection dataConnection, string @diagramname, int? @owner_id, int? @version, byte[] @definition)
		{
			return dataConnection.ExecuteProc("[dbo].[sp_alterdiagram]",
				new DataParameter("@diagramname", @diagramname, DataType.NVarChar),
				new DataParameter("@owner_id",    @owner_id,    DataType.Int32),
				new DataParameter("@version",     @version,     DataType.Int32),
				new DataParameter("@definition",  @definition,  DataType.VarBinary));
		}

		#endregion

		#region sp_creatediagram

		public static int sp_creatediagram(this DataConnection dataConnection, string @diagramname, int? @owner_id, int? @version, byte[] @definition)
		{
			return dataConnection.ExecuteProc("[dbo].[sp_creatediagram]",
				new DataParameter("@diagramname", @diagramname, DataType.NVarChar),
				new DataParameter("@owner_id",    @owner_id,    DataType.Int32),
				new DataParameter("@version",     @version,     DataType.Int32),
				new DataParameter("@definition",  @definition,  DataType.VarBinary));
		}

		#endregion

		#region sp_dropdiagram

		public static int sp_dropdiagram(this DataConnection dataConnection, string @diagramname, int? @owner_id)
		{
			return dataConnection.ExecuteProc("[dbo].[sp_dropdiagram]",
				new DataParameter("@diagramname", @diagramname, DataType.NVarChar),
				new DataParameter("@owner_id",    @owner_id,    DataType.Int32));
		}

		#endregion

		#region sp_helpdiagramdefinition

		public static IEnumerable<sp_helpdiagramdefinitionResult> sp_helpdiagramdefinition(this DataConnection dataConnection, string @diagramname, int? @owner_id)
		{
			return dataConnection.QueryProc<sp_helpdiagramdefinitionResult>("[dbo].[sp_helpdiagramdefinition]",
				new DataParameter("@diagramname", @diagramname, DataType.NVarChar),
				new DataParameter("@owner_id",    @owner_id,    DataType.Int32));
		}

		public partial class sp_helpdiagramdefinitionResult
		{
			public int?   version    { get; set; }
			public byte[] definition { get; set; }
		}

		#endregion

		#region sp_helpdiagrams

		public static IEnumerable<sp_helpdiagramsResult> sp_helpdiagrams(this DataConnection dataConnection, string @diagramname, int? @owner_id)
		{
			return dataConnection.QueryProc<sp_helpdiagramsResult>("[dbo].[sp_helpdiagrams]",
				new DataParameter("@diagramname", @diagramname, DataType.NVarChar),
				new DataParameter("@owner_id",    @owner_id,    DataType.Int32));
		}

		public partial class sp_helpdiagramsResult
		{
			public string Database { get; set; }
			public string Name     { get; set; }
			public int    ID       { get; set; }
			public string Owner    { get; set; }
			public int    OwnerID  { get; set; }
		}

		#endregion

		#region sp_renamediagram

		public static int sp_renamediagram(this DataConnection dataConnection, string @diagramname, int? @owner_id, string @new_diagramname)
		{
			return dataConnection.ExecuteProc("[dbo].[sp_renamediagram]",
				new DataParameter("@diagramname",     @diagramname,     DataType.NVarChar),
				new DataParameter("@owner_id",        @owner_id,        DataType.Int32),
				new DataParameter("@new_diagramname", @new_diagramname, DataType.NVarChar));
		}

		#endregion
	}

	public static partial class SqlFunctions
	{
		#region fn_diagramobjects

		[Sql.Function(Name="dbo.fn_diagramobjects", ServerSideOnly=true)]
		public static int? fn_diagramobjects()
		{
			throw new InvalidOperationException();
		}

		#endregion
	}

	public static partial class TableExtensions
	{
		public static import_frmp_orgs Find(this ITable<import_frmp_orgs> table, string c_oid)
		{
			return table.FirstOrDefault(t =>
				t.c_oid == c_oid);
		}

		public static import_frmp_peoples Find(this ITable<import_frmp_peoples> table, Guid id)
		{
			return table.FirstOrDefault(t =>
				t.id == id);
		}
	}
}
